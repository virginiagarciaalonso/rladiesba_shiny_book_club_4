---
title: "Layout, themes, HTML (capítulo 6)"
author: "Luis Verde Arregoitia & Virginia García Alonso"
format: 
  revealjs:
    theme: slides.scss
    code-block-height: 600px
editor: 
  mode: source
execute: 
  echo: true
  warning: false
  eval: false
---
## Objetivos de este capítulo

Descubrir herramientas para controlar la apariencia general de la app.

<br>


![](https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExeTgwMmo2bW90cjMyNHkxZmF5ejhwem9maXV1OTBsbHZwNm1yZ3ZreCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Kd9IQloZWxEEU/giphy.gif){.center}


## Hoja de ruta 

1. Diseños de página

2. Cómo personalizar la visualización mediante el uso de "temas"

3. Qué hay "detrás" y cómo modificar aspectos visuales

4. Materiales de interés

##

Las aplicaciones de Shiny tienen un aspecto predeterminado bastante simple y genérico

![](imgs/numeric.png){.center}

<p align="center"><mark style="background-color:#aabbff">Podemos usar herramientas de diseño web para personalizar nuestras aplicaciones independientemente del código de R subyacente :)</mark></p>

## Elementos a personalizar {.section .vertical-center}


## 1. Diseños de página

Un primer paso es determinar cuál es la **disposión espacial de los componentes interactivos** que componen la aplicación. 

<br>

De esta manera podemos hacer que la aplicación sea más:

- fácil de usar
- linda de ver :)


## 1.1 Diseño de páginas simples

Hasta ahora todos los ejemplos del libro siguen una disposición de una sola página, construido con `fluidPage()`

<br>

Dentro de ese diseño de página simple se pueden modificar:

- número de columnas y/o filas 
- tamaño relativo que cada elemento va a ocupar


## Jerarquía y elementos anidados

Los diseños se crean mediante una jerarquía de llamadas a funciones. 

::::: columns

::: {.column width="60%"}
```{r}
#| eval: false

fluidPage( # una sola página, ya genera el HTML, CSS y js necesario
  titlePanel(), # cajita para el título de la app
  sidebarLayout( # panel dividido en dos
    sidebarPanel(), # controles de un lado
    mainPanel() # resultados aquí
  )
)

```
:::


::: {.column width="40%"}
![](https://mastering-shiny.org/diagrams/action-layout/sidebar.png)
:::

:::::

Es **clave** entender/mantener el espaciado que delimita las jerarquías.

## *Fluid* design

Es un estilo de diseño web que usa **unidades relativas** para acomodar elementos en la pantalla y mantener siempre los mismos elementos visibles en pantallas de diferentes tamaños.

<br>

Organiza todo el contenido en 12 columnas (12 se puede dividir en 2, 3, 4, y 6)

<br>

> Existen otras opciones (`fillPage()`,  `fixedPage()`)

## Caso 1:  una fila (sidebar)

El ejemplo anterior de diseño constaba de una única fila de contenido con dos elementos

Por defecto la relación de tamaño de esos elementos es 1/3

![](https://mastering-shiny.org/diagrams/action-layout/sidebar.png){.center}

##

Pero se pueden cambiar de **manera fluida**. Por ejemplo si queremos que la relación sea 1/1:

<br>

::::: columns

::: {.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "4,5"

fluidPage(
  titlePanel(),
  sidebarLayout(
    sidebarPanel(..., width = 6),
    mainPanel(..., width = 6)
  )
)

```
:::

::: {.column width="50%"}
![Imagen de programminghistorian.org](https://programminghistorian.org/images/shiny-leaflet-newspaper-map-tutorial/shiny-leaflet-newspaper-map-tutorial-3.png)
:::

:::::

cada elemento del sidebar ocupa 50%, que equivale a 6 (12/2)


## Caso 2: varias filas (fluidrow)

<br>

Bajo el capó, sidebarLayout() está construido sobre un **diseño flexible de múltiples filas**.

<br>

Este diseño se puede utilizar directamente para crear aplicaciones visualmente más complejas.


##
Se empieza con fluidPage(), luego se crean filas con fluidRow(), y columnas con column().

::::: columns

::: {.column width="50%"}
```{r}
#| eval: false

fluidPage(
  fluidRow(
    column(4, ...),
    column(8, ...)
    ),
  fluidRow(
    column(6, ...),
    column(6,...)
  )
)

```
:::

::: {.column width="50%"}
![](https://mastering-shiny.org/diagrams/action-layout/multirow.png)
:::

::::

Aquí el ancho de los paneles se define en el primer elemento de `column`.


## 1.2. Diseño de páginas multiples 

Muchas veces las applicaciones crecen en complejidad y la cantidad de elemntos que se quieren mostrar no entran en una única página.

<br>

<p align="center" style="background-color:#aabbff">Por suerte es posible generar la ilusión de *numerosas páginas* en una única aplicación!</p>

## Caso 1: pestañas (tabsets)

Permite seleccionar y ver una pestaña a la vez. Se declara que sea un "tabset" con tabsetPanel() y a cada pestaña con tabPanel().

::::: columns

::: {.column width="60%"}
```{r}
#| eval: false
#| code-line-numbers: "|2|3,9,10"

ui <- fluidPage(
  tabsetPanel(
    tabPanel("Import data", 
      fileInput("file", "Data", buttonLabel = "Upload..."),
      textInput("delim", "Delimiter (leave blank to guess)", ""),
      numericInput("skip", "Rows to skip", 0, min = 0),
      numericInput("rows", "Rows to preview", 10, min = 1)
    ),
    tabPanel("Set parameters"),
    tabPanel("Visualise results")
  )
)

```
:::

::: {.column width="40%"}
![](imgs/tabset.png)
:::

::::

## Caso 2A: navlist

Genera una "tabla de contenidos" vertical. Se declara que sea una lista con navlistPanel() y se agregan los títulos y sus pestañas con tabPanel().

::::: columns

::: {.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "|2|4,5|6,7,8"

ui <- fluidPage(
  navlistPanel(
    id = "tabset",
    "Heading 1",
    tabPanel("panel 1", "Panel one contents"),
    "Heading 2",
    tabPanel("panel 2", ...),
    tabPanel("panel 3", ...)
  )
)
```
:::


::: {.column width="50%"}
![](imgs/navlistPanel.png)
:::

::::

## Caso 2B: navbar

Genera una "tabla de contenidos" horizontal. En este caso se llama primero a navbarPage() (en vez de fluidPage) y se agregan pestañas con tabPanel() o menues deplegables con navbarMenu().

::::: columns

::: {.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "|1|3,4,5|6"

ui <- navbarPage(
  "Page title",   
  tabPanel("panel 1", "one"),
  tabPanel("panel 2", "two"),
  tabPanel("panel 3", "three"),
  navbarMenu("subpanels", 
    tabPanel("panel 4a", "four-a"),
    tabPanel("panel 4b", "four-b"),
    tabPanel("panel 4c", "four-c")
  )
)
```
:::

::: {.column width="50%"}
![](imgs/navbarPage.png)
:::

::::

## 2. Temas

- La configuración inicial que se aplica a un documento o en este caso, una aplicación.

- Determina su estilo visual por defecto

- Convenciones y estilos diseñados para distintos fines

## bslib

- Paquete con funciones para cambiar los valores predeterminados

- Sigue convenciones bootstrap y nos sirve para elegir apariencias existentes


## Aplicación en dark theme

> 'darkly' de bootswatch y `thematic` que le aplica estos valores a figuras de ggplot, base, lattice, etc.


## brand.yml

Identidad visual portatil y simple para Shiny y Quarto

::: columns
::: {.column width="20%"}
![](https://posit-dev.github.io/brand-yml/logos/tall/brand-yml-tall-color.svg)
:::

::: {.column width="80%"}

- colores
- logos
- fuentes

:::
:::


##

![](imgs/brand.png){.center}


## 3. Que hay detrás: componentes de estilo

### css (Cascading Style Sheets)

- Lenguaje que maneja el diseño y presentación de las páginas web

- Puede especificarse:
  - Por separado en un archivo de hoja de estilo
  - Junto con el código HTML en un contenedor de estilo (`<style>`)
  - Para un elemento puntual
  
##

::: columns
::: {.column width="50%"}

### HTML

```{html}
<div class="cajarosa">
  <p>
Texto en una caja con relleno de color rosa
  </p>
</div>
```



:::

::: {.column width="50%"}

### css

```{css}
.cajarosa {
  border: 1px solid #333;
  background-color: #F8C8DC;
}
```
:::
:::


### Resultado

::: {.cajarosa}

Texto en una caja con relleno de color rosa

:::

## bootstrap

- Bootstrap es una colección de convenciones HTML, estilos CSS y fragmentos JS agrupados de forma práctica.


## Proyecto [bootswatch](https://bootswatch.com/)

'Themes' gratuitos para bootstrap, licencia MIT

```{r}
#| eval: false

 fluidPage(
  theme = bslib::bs_theme(bootswatch = "darkly")
 )
```

## No todo es bootstrap

- Shiny [Semantic](https://connect.appsilon.com/shiny-semantic-components/) de Appsilon

- Shiny bulma (ej)

##

Todas las funciones de _input_, _output_ y _layout_ generan HTML

## 

#### Ejemplo interactivo simple de css y html

[css en w3schools](https://www.w3schools.com/html/tryit.asp?filename=tryhtml_css_inline)

## 

- Las aplicaciones ultimadamente se despliegan en un navegador web

- Podemos usar herramientas de diseño web para personalizar nuestras aplicaciones independientemente del código de R subyacente  

## Hola mundo

`ctrl+shift+I`

![](imgs/inspector.png){.center}


## 4. Material de interés

* Shiny [Application layout guide](https://shiny.posit.co/r/articles/build/layout-guide/)

* [Just enough CSS (and Sass) for data scientists](https://samanthacsik.github.io/talks_workshops/2023-08-03-just-enough-css/)

* Taller de Rmarkdown-ReinventarTec 2022
    + [HTML](https://rmarkdown-reinventartec-2022.netlify.app/)
    + [Código](https://github.com/RLadies-BA/Reinventartec-2022/blob/main/Rmarkdown_ReinventarTec.Rmd)