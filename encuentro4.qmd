---
title: "Layout, themes, HTML (capítulo 6)"
author: "Luis Verde Arregoitia & Virginia García Alonso"
format: 
  revealjs:
    theme: slides.scss
    code-block-height: 600px
editor: 
  mode: source
execute: 
  echo: true
  warning: false
  eval: false
---
## Objetivos de este capítulo

Descubrir herramientas para controlar la apariencia general de la app.

## Hoja de ruta 

1. Diseños de página

2. Cómo personalizar la visualización mediante el uso de "temas"

3. Qué hay "detrás" y cómo modificar aspectos visuales

4. Materiales de interés

##

Las aplicaciones de Shiny tienen un aspecto predeterminado bastante simple y genérico

![](https://mastering-shiny.org/demos/basic-ui/numeric.png)

- Podemos usar herramientas de diseño web para personalizar nuestras aplicaciones independientemente del código de R subyacente  


## Elementos a personalizar {.section}


## 1. Diseños de página

Un primer paso es determinar cuál es la **disposión espacial de los componentes interactivos** que componen la aplicación. 

<br>

De esta manera podemos hacer que la aplicación sea más:

- fácil de usar
- linda de ver :)


## 1.1 Diseño de páginas simples

Hasta ahora todos los ejemplos del libro siguen una disposición de una sola página, construido con `fluidPage()`

<br>

Dentro de ese diseño de página simple se pueden modificar:

- número de columnas y/o filas 
- tamaño relativo que cada elemento va a ocupar


## Jerarquía y elementos anidados

Los diseños se crean mediante una jerarquía de llamadas a funciones. 

::::: columns

::: {.column width="50%"}
```{r}
#| eval: false

fluidPage( # una sola página, ya genera el HTML, CSS y js necesario
  titlePanel(),
  sidebarLayout(
    sidebarPanel(), # controles de un lado
    mainPanel() # resultados aquí
  )
)

```
:::


::: {.column width="50%"}
![](https://mastering-shiny.org/diagrams/action-layout/sidebar.png)
:::

::::

Es **clave** entender/mantener el espaciado que delimita las jerarquías.

## *Fluid* design

Es un estilo de diseño web que usa **unidades relativas** para acomodar elementos en la pantalla y mantener siempre los mismos elementos visibles en pantallas de diferentes tamaños.

Organiza todo el contenido en 12 columnas (12 se puede dividir en 2, 3, 4, y 6)

> Existen otras opciones 

## Caso 1:  1 fila (sidebar)

El ejemplo anterior de diseño constaba de una única fila de contenido con dos elementos

Por default la relación de tamaño de esos elementos es 1/3

![](https://mastering-shiny.org/diagrams/action-layout/sidebar.png)

##

Pero se pueden cambiar de **manera fluida**. Por ejemplo si queremos que la relación sea 1/1:

<br>

::::: columns

::: {.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "4,5"

fluidPage(
  titlePanel(),
  sidebarLayout(
    sidebarPanel(..., width = 6),
    mainPanel(..., width = 6)
  )
)

```
:::

::: {.column width="50%"}
![](https://programminghistorian.org/images/shiny-leaflet-newspaper-map-tutorial/shiny-leaflet-newspaper-map-tutorial-3.png)
:::

:::::

Ahora cada elemento del sidebar ocupa el 50% que equivale a 6 (12/2)


## Caso 2: varias filas (fluidrow)

HASTA ACA LLEGUE!!

## 

- Las aplicaciones ultimadamente se despliegan en un navegador web

- Podemos usar herramientas de diseño web para personalizar nuestras aplicaciones independientemente del código de R subyacente  

## Hola mundo

`ctrl+shift+I`

![](imgs/inspector.png)


## 1.2. Diseño de páginas multiples

anidamiento de tabs
opcion the navlistPanel/navbarPage (modo vertical)


## 2. Temas

no viene en el libro pero mencionar brand_yml que va a ser lo más usado y le pasa los parámetros a bslib *mostrar el diagrama de jerarquía
thematic?
mostrar los themes en bootswatch 


## 3. Que hay detrás: componentes de estilo

- breve mención a que son los componentes de estilo (solo para tener una idea de que son HTML y CSS) y así se entienda que es bootstrap

- Bootstrap es una colección de convenciones HTML, estilos CSS y fragmentos JS agrupados de forma práctica.

##

Proyecto bootswatch

```{r}
#| eval: false

 fluidPage(
  theme = bslib::bs_theme(bootswatch = "darkly")
 )
```

##

No todo es bootstrap

![Semantic](https://connect.appsilon.com/shiny-semantic-components/)

##

Todas las funciones de _input_, _output_ y _layout_ generan HTML

## 

#### Ejemplo interactivo simple de css y html

[css en w3schools](https://www.w3schools.com/html/tryit.asp?filename=tryhtml_css_inline)

## 4. Material de interés

* Shiny [Application layout guide](https://shiny.posit.co/r/articles/build/layout-guide/)

* [Just enough CSS (and Sass) for data scientists](https://samanthacsik.github.io/talks_workshops/2023-08-03-just-enough-css/)